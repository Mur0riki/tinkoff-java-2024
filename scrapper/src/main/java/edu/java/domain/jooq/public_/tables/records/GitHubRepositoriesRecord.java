/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.public_.tables.records;


import edu.java.domain.jooq.public_.tables.GitHubRepositories;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GitHubRepositoriesRecord extends UpdatableRecordImpl<GitHubRepositoriesRecord> implements Record6<Long, Long, String, String, LocalDateTime, Long[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.git_hub_repositories.id</code>.
     */
    public void setId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.git_hub_repositories.link_id</code>.
     */
    public void setLinkId(@NotNull Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.link_id</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLinkId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.git_hub_repositories.name</code>.
     */
    public void setName(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.name</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 128)
    @NotNull
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.git_hub_repositories.owner</code>.
     */
    public void setOwner(@NotNull String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.owner</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 128)
    @NotNull
    public String getOwner() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.git_hub_repositories.updated_at</code>.
     */
    public void setUpdatedAt(@NotNull LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.updated_at</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.git_hub_repositories.activities_ids</code>.
     */
    public void setActivitiesIds(@NotNull Long[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.git_hub_repositories.activities_ids</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long[] getActivitiesIds() {
        return (Long[]) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row6<Long, Long, String, String, LocalDateTime, Long[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row6<Long, Long, String, String, LocalDateTime, Long[]> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.ID;
    }

    @Override
    @NotNull
    public Field<Long> field2() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.LINK_ID;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.NAME;
    }

    @Override
    @NotNull
    public Field<String> field4() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.OWNER;
    }

    @Override
    @NotNull
    public Field<LocalDateTime> field5() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.UPDATED_AT;
    }

    @Override
    @NotNull
    public Field<Long[]> field6() {
        return GitHubRepositories.GIT_HUB_REPOSITORIES.ACTIVITIES_IDS;
    }

    @Override
    @NotNull
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public Long component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String component3() {
        return getName();
    }

    @Override
    @NotNull
    public String component4() {
        return getOwner();
    }

    @Override
    @NotNull
    public LocalDateTime component5() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public Long[] component6() {
        return getActivitiesIds();
    }

    @Override
    @NotNull
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public Long value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public String value3() {
        return getName();
    }

    @Override
    @NotNull
    public String value4() {
        return getOwner();
    }

    @Override
    @NotNull
    public LocalDateTime value5() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public Long[] value6() {
        return getActivitiesIds();
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value1(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value2(@NotNull Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value3(@NotNull String value) {
        setName(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value4(@NotNull String value) {
        setOwner(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value5(@NotNull LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord value6(@NotNull Long[] value) {
        setActivitiesIds(value);
        return this;
    }

    @Override
    @NotNull
    public GitHubRepositoriesRecord values(@NotNull Long value1, @NotNull Long value2, @NotNull String value3, @NotNull String value4, @NotNull LocalDateTime value5, @NotNull Long[] value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitHubRepositoriesRecord
     */
    public GitHubRepositoriesRecord() {
        super(GitHubRepositories.GIT_HUB_REPOSITORIES);
    }

    /**
     * Create a detached, initialised GitHubRepositoriesRecord
     */
    @ConstructorProperties({ "id", "linkId", "name", "owner", "updatedAt", "activitiesIds" })
    public GitHubRepositoriesRecord(@NotNull Long id, @NotNull Long linkId, @NotNull String name, @NotNull String owner, @NotNull LocalDateTime updatedAt, @NotNull Long[] activitiesIds) {
        super(GitHubRepositories.GIT_HUB_REPOSITORIES);

        setId(id);
        setLinkId(linkId);
        setName(name);
        setOwner(owner);
        setUpdatedAt(updatedAt);
        setActivitiesIds(activitiesIds);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GitHubRepositoriesRecord
     */
    public GitHubRepositoriesRecord(edu.java.domain.jooq.public_.tables.pojos.GitHubRepositories value) {
        super(GitHubRepositories.GIT_HUB_REPOSITORIES);

        if (value != null) {
            setId(value.getId());
            setLinkId(value.getLinkId());
            setName(value.getName());
            setOwner(value.getOwner());
            setUpdatedAt(value.getUpdatedAt());
            setActivitiesIds(value.getActivitiesIds());
            resetChangedOnNotNull();
        }
    }
}
